<?php
/**
 * Netresearch_OPS
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this extension to
 * newer versions in the future.
 *
 * @copyright Copyright (c) 2016 Netresearch GmbH & Co. KG (http://www.netresearch.de/)
 * @license   Open Software License (OSL 3.0)
 * @link      http://opensource.org/licenses/osl-3.0.php
 *
 * Netresearch_OPS_Block_Form_DirectDebit
 *
 * @category  design
 * @package   OPS
 * @author    Thomas Birke <thomas.birke@netresearch.de>
 */
?>

<style>
    .ops_tokenization_frame {
        height: 475px;
        width: 100%;
        border: none;
    }
</style>
<?php
/** @var  Netresearch_OPS_Block_Form_DirectDebit $this */
$code = $this->getMethodCode();
$storeId = $this->getQuote()->getStoreId();
?>
<ul class="form-list ops-form-list ops_card" id="payment_form_<?php echo $code ?>" style="display:none;">

    <!--    new  Alias -->
    <li id="insert_payment_details_<?php echo $code ?>" class="insert_payment_details" style="">
        <label for="ops_directdebit_country_id"><?php echo $this->__('Country'); ?></label><br/>
        <select title="ops_directebit_country_id" class="required-entry"
                name="payment[<?php echo $code ?>_data][country_id]"
                id="<?php echo $code ?>_country_id">
            <option value=""><?php echo $this->__('--Please Select--') ?></option>
            <?php foreach ($this->getDirectDebitCountryIds() as $countryId) : ?>
                <option value="<?php echo $countryId; ?>" <?php echo $this->getSelectedCountryId() == $countryId ? 'selected' : '' ?>>
                    <?php echo Mage::getModel('directory/country')->loadByCode($countryId)->getName(); ?>
                </option>
            <?php endforeach; ?>
        </select>

        <input style="display:none;" name="payment[<?php echo $code; ?>_data][alias]" value=""
               id="<?php echo $code ?>_alias_input">

        <iframe id="ops_iframe_<?php echo $code ?>" class="ops_tokenization_frame" style="display: block;"
                src="about:blank"></iframe>
        <div id="<?php echo $code ?>_loader" style="display: none; font-weight: bold;"></div>
    </li>
    <script type="text/javascript">
        opsHashUrl = '<?php echo $this->getGenerateHashUrl(null, true); ?>';
        opsOrderId = '<?php echo $this->getQuote()->getId(); ?>';
        opsPspid = '<?php echo $this->getPSPID($storeId); ?>';
        opsAcceptUrl = '<?php echo $this->getAliasAcceptUrl(null, true); ?>';
        opsExceptionUrl = '<?php echo $this->getAliasExceptionUrl(null, true); ?>';
        opsUrl = '<?php echo $this->getAliasGatewayUrl($storeId); ?>';
        opsAlias = '';
        paramplus = 'RESPONSEFORMAT=JSON&isAjax=1';

        <?php echo $code ?> = {
            'code': '<?php echo $code ?>',
            'loader': $('<?php echo $code ?>_loader'),
            'tokenizationFrame': $('ops_iframe_<?php echo $code ?>'),
            'aliasManager': 'N',
            'brand': function(){ return 'Direct Debits '+ $("<?php echo $code ?>_country_id").value;}
        };

        locale = '<?php echo Mage::app()->getLocale()->getLocaleCode(); ?>';
        transmitPaymentMethod = true;

        Event.observe(document, 'alias:success', function (event) {
            payment.fillOpsLoader('SUCCESS_TOKEN');
            $(payment.currentMethodObject.code + '_alias_input').value = event.memo;
            payment.opsAlias = {
                "method": payment.currentMethodObject.code,
                "alias": event.memo
            };
            toggleOrderSubmit(true);
            payment.opsAliasSuccess = true;
        });

        Event.observe(document, 'alias:failure', function (event) {
            payment.opsAliasSuccess = false;
            payment.currentMethodObject.tokenizationFrame.src = 'about:blank';
            payment.fillOpsLoader();
            payment.fillOpsLoader('FAILURE_TOKEN');
        });

        Event.observe(<?php echo $code ?>.tokenizationFrame, 'load', function () {

            if (<?php echo $code ?>.
            tokenizationFrame.src != 'about:blank'
            && !payment.opsAliasSuccess
            )
            {
                <?php echo $code ?>.
                loader.style.display = 'none';
                <?php echo $code ?>.
                tokenizationFrame.style.display = 'block';
            }
        }
        )
        ;
        Event.observe('<?php echo $code; ?>_country_id', 'change', function () {
            payment.handleBrandChange();
        });

        Event.observe(window, 'load', function (event) {
            if (typeof window[order.paymentMethod] != 'undefined') {
                payment.currentMethodObject = window[order.paymentMethod];
                if (!payment.opsAliasSuccess
                    && payment.currentMethodObject.tokenizationFrame.src == 'about:blank'
                    && $(payment.currentMethodObject.code + '_country_id').value != ''
                ) {
                    payment.handleBrandChange();
                } else {
                    toggleOrderSubmit(true);
                    payment.fillOpsLoader('SUCCESS_TOKEN');
                }
            } else {
                delete payment.currentMethodObject;
            }
        });

        order.setPaymentMethod = order.setPaymentMethod.wrap(function (originalMethod, method) {

            payment.opsAdminSwitchMethod(method);
            originalMethod(method);
        });

        // on reload we have to hide the iframe and show a success token if save was successfull already

        if (payment.opsAliasSuccess && typeof payment.currentMethodObject != 'undefined') {
            payment.fillOpsLoader('SUCCESS_TOKEN');
        }

        payment.reloadIframe = function () {
            toggleOrderSubmit(false);
            payment.currentMethodObject.tokenizationFrame.src = 'about:blank';
            payment.opsAliasSuccess = false;
            payment.generateHash();
        };

        if (typeof payment.prepareOpsForm != 'undefined') {
            payment.prepareOpsForm = payment.prepareOpsForm.wrap(function (originalMethod, hash) {
                if (!hash) {
                    var form = originalMethod(hash);
                    var formKeyElement = document.createElement('input');
                    formKeyElement.id = 'form_key';
                    formKeyElement.name = 'form_key';
                    formKeyElement.value = '<?php echo Mage::getSingleton('core/session')->getFormKey(); ?>';
                    form.appendChild(formKeyElement);

                    return form;
                } else {
                    return originalMethod(hash);
                }

            });
        }

        if (typeof window[order.paymentMethod] != 'undefined') {
            payment.currentMethodObject = window[order.paymentMethod];
        }

        if (typeof payment.opsAlias != 'undefined') {
            if (payment.opsAlias.method == order.paymentMethod) {
                $(payment.opsAlias.method + '_alias_input').value = payment.opsAlias.alias;
                payment.fillOpsLoader();
                payment.fillOpsLoader('SUCCESS_TOKEN');
            }
        }
    </script>
</ul>
